import datetime

from aiogram import Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.filters.state import State, StatesGroup

from bot.database.methods import get, create, update
from bot.database.models.main import Defect
from bot.keyboards import reply, inline
from bot.misc.util import callback_wrapper


class DefectForm(StatesGroup):
    insert_room_number = State()
    insert_desc = State()
    is_insert_photo = State()
    wait_for_photo = State()


async def bot_start(msg: types.Message):
    await msg.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=reply.get_start_kb())


async def register_command(msg: types.Message):
    user = get.user_by_tg_id(msg.from_id)

    if user:
        user = user[0]
        if user.Role_id == 1:
            await msg.answer('–í–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—é—î—Ç—å—Å—è. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.')
        else:
            await msg.answer('–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.')
    else:
        create.new_user(msg)
        await msg.answer('–í–∞—à –∑–∞–ø–∏—Ç –≤–∏—Å–ª–∞–Ω–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω–Ω—è. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.')


async def login_command(msg: types.Message):
    user = get.user_by_tg_id(msg.from_id)

    if user:
        user = user[0]
        if user.Role_id == 1:
            await msg.answer('–í–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—é—î—Ç—å—Å—è. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.')
            return

        if not user.Is_available:
            await msg.answer('–í–∞—à –∞–∫–∞—É–Ω—Ç –≤–∏–∫–ª—é—á–µ–Ω–∏–π.')
            return

        if user.Role_id == 2:
            await msg.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=reply.get_tech_kb())
            return

        if user.Role_id == 3:
            await msg.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=reply.get_repair_kb())
            return

        await msg.answer('–í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞.')
    else:
        await msg.answer('–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.')


async def add_defect_command(msg: types.Message, state: FSMContext):
    await msg.answer(text='–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏')
    await state.set_state(DefectForm.insert_room_number)


async def room_number_choosen(msg: types.Message, state: FSMContext):
    await msg.answer(text='–û–ø–∏—à—ñ—Ç—å –ø–æ–ª–æ–º–∫—É')
    await state.update_data(room_number=msg.text)
    await state.set_state(DefectForm.insert_desc)


async def desc_written(msg: types.Message, state: FSMContext):
    await msg.answer('–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ?', reply_markup=inline.get_photo_kb())
    await state.update_data(desc=msg.text)
    await state.set_state(DefectForm.is_insert_photo)


@callback_wrapper
async def photo_sending(callback: types.CallbackQuery, state: FSMContext, *args, **kwargs):
    await callback.message.edit_text('–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ')
    await state.set_state(DefectForm.wait_for_photo)


@callback_wrapper
async def defect_endpoint(data: types.CallbackQuery | types.Message, state: FSMContext, *args, **kwargs):
    if type(data) == types.Message:
        msg = data

    elif type(data) == types.CallbackQuery:
        msg = data.message

    else:
        msg = 'DEFINE ME'

    user_data = await state.get_data()

    defect_data = dict()
    defect_data['author_id'] = get.user_by_tg_id(str(msg.chat.id))[0].User_id
    defect_data['desc'] = user_data['desc']
    defect_data['room_number'] = user_data['room_number']

    defect = create.new_defect(defect_data)

    if type(data) == types.Message:
        photo = await data.photo[1].download(destination_dir='temp/')
        print('MSG')
        with open(photo.name, "rb") as image:
            f = image.read()
            photo_bytes = bytearray(f)
        defect_photo = create.new_defect_photo(defect.Defect_id, photo_bytes)

    await msg.answer('–î–µ—Ñ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ', reply_markup=reply.get_tech_kb())

    repair_users = get.users_by_role_id(3)
    message_text = f"–ó'—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π –¥–µ—Ñ–µ–∫—Ç\n" \
                   f"–ù–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏: {defect_data['room_number']}\n\n" \
                   f"–û–ø–∏—Å: {defect_data['desc']}"

    photos = get.defectphoto_by_id(defect.Defect_id)

    for rep_user in repair_users:
        if len(photos) != 0:
            await data.bot.send_photo(rep_user.Tg_id, photos[0].ImageData)
        await data.bot.send_message(rep_user.Tg_id, message_text, reply_markup=inline.get_defect_accept_kb(defect))

    await state.finish()
    await state.reset_data()


@callback_wrapper
async def accept_defect_endpoint(data: types.CallbackQuery, *args, **kwargs):
    callback_tuple = data.data.split()
    defect_id = int(callback_tuple[1])
    defect = get.defect_by_id(defect_id)

    if len(defect) == 0:
        await data.message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    defect: Defect = defect[0]

    if defect.Repairman_id:
        await data.message.edit_text('–î–µ—Ñ–µ–∫—Ç –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —ñ–Ω—à–∏–º –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º')
        return

    repairman_id = get.user_by_tg_id(data.from_user.id)[0].User_id
    res = update.defect_info(defect_id, {'Repairman_id': repairman_id, 'Status_id': 2})
    print(f'DEFECT {defect_id} UPDATE: {res}')
    if res == 1:
        await data.message.answer(f'–î–µ—Ñ–µ–∫—Ç {defect_id} –≤ –∫—ñ–º–Ω–∞—Ç—ñ {defect.Room_number} —É—Å–ø—ñ—à–Ω–æ –≤–∑—è—Ç–∏–π.')
    else:
        await data.message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


async def open_defect_list(msg: types.Message):
    defects = get.defects_by_status_id(1)

    if len(defects) == 0:
        await msg.answer('–í—ñ–¥–∫—Ä–∏—Ç—ñ –¥–µ—Ñ–µ–∫—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
        return

    for defect in defects:
        text = f"–î–µ—Ñ–µ–∫—Ç ‚Ññ{defect.Defect_id}\n" \
               f"–ù–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏: {defect.Room_number}\n" \
               f"–û–ø–∏—Å: {defect.Description}\n"
        await msg.answer(text, reply_markup=inline.get_open_defect_kb(defect))


async def defect_list(msg: types.Message):
    user = get.user_by_tg_id(msg.from_id)[0]
    defects = get.defects_by_repairman_id(user.User_id)
    defect_count = 0
    if len(defects) == 0:
        await msg.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–µ—Ñ–µ–∫—Ç—ñ–≤ –≤ –æ–±—Ä–æ–±—Ü—ñ')
        return

    for defect in defects:
        if defect.Status_id in [2, 3]:
            continue

        text = f"–î–µ—Ñ–µ–∫—Ç ‚Ññ{defect.Defect_id}\n" \
               f"–ù–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏: {defect.Room_number}\n" \
               f"–û–ø–∏—Å: {defect.Description}\n"
        await msg.answer(text, reply_markup=inline.get_defect_kb(defect))
        defect_count += 1

    if defect_count == 0:
        await msg.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–µ—Ñ–µ–∫—Ç—ñ–≤ –≤ –æ–±—Ä–æ–±—Ü—ñ')


async def get_defect_photo(data: types.CallbackQuery):
    defect_id = int(data.data.split()[1])
    photo = get.defectphoto_by_id(defect_id)

    if len(photo) == 0:
        await data.message.reply('–ù–µ–º–∞ —Ñ–æ—Ç–æ')
    else:
        await data.message.reply_photo(photo[0].ImageData)


@callback_wrapper
async def defect_complete(data: types.CallbackQuery, *args, **kwargs):
    defect_id = int(data.data.split()[1])
    query_dict = {
        'Status_id': 3,
        'Date_close': datetime.datetime.utcnow()
    }
    update.defect_info(defect_id, query_dict)

    await data.message.edit_text(data.message.text + '\n\n<b>–î–µ—Ñ–µ–∫—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π</b>')


def register_user_handlers(dp: Dispatcher):
    # todo: register all user handlers
    dp.register_callback_query_handler(photo_sending, lambda x: x.data == 'defect_photo_yes',
                                       state=DefectForm.is_insert_photo)
    dp.register_callback_query_handler(defect_endpoint, lambda x: x.data == 'defect_photo_no',
                                       state=DefectForm.is_insert_photo)
    dp.register_callback_query_handler(accept_defect_endpoint, lambda x: x.data.split()[0] == 'defect_accept')
    dp.register_callback_query_handler(get_defect_photo, lambda x: x.data.split()[0] == 'defect_photo')
    dp.register_callback_query_handler(defect_complete, lambda x: x.data.split()[0] == 'defect_complete')

    dp.register_message_handler(bot_start, CommandStart())
    dp.register_message_handler(register_command, Text('üìñ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'))
    dp.register_message_handler(login_command, Text('üîê –í—Ö—ñ–¥'))
    dp.register_message_handler(add_defect_command, Text('‚û° –î–æ–¥–∞—Ç–∏ –¥–µ—Ñ–µ–∫—Ç'))
    dp.register_message_handler(defect_list, Text('üìò –°–ø–∏—Å–æ–∫ –¥–µ—Ñ–µ–∫—Ç—ñ–≤'))
    dp.register_message_handler(open_defect_list, Text('üìÇ –í—ñ–¥–∫—Ä–∏—Ç—ñ –¥–µ—Ñ–µ–∫—Ç–∏'))
    dp.register_message_handler(room_number_choosen, state=DefectForm.insert_room_number, regexp='^[0-9]*$')
    dp.register_message_handler(desc_written, state=DefectForm.insert_desc)
    dp.register_message_handler(defect_endpoint, state=DefectForm.wait_for_photo, content_types=['photo'])
